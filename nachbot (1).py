import os
import sqlite3
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import random
import pytz

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
load_dotenv()
TOKEN = os.getenv("TOKEN")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ---
conn = sqlite3.connect('tasks.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
    (id INTEGER PRIMARY KEY AUTOINCREMENT,
     user_id INTEGER,
     task_text TEXT,
     days INTEGER,
     created_at DATETIME,
     status TEXT DEFAULT 'active',
     report TEXT,
     priority TEXT DEFAULT '–æ–±—ã—á–Ω–∞—è',
     deadline DATETIME,
     checklist TEXT,
     attachments TEXT
    )''')
conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class TaskStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_days = State()
    waiting_for_priority = State()
    waiting_for_deadline = State()
    waiting_for_checklist = State()
    waiting_for_attachments = State()
    waiting_for_report = State()
    editing_task_text = State()
    adding_checklist = State()

# --- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã ---
MOTIVATION_QUOTES = [
    "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ, –±—Ä–∞—Ç!",
    "–ù–µ —Å–¥–∞–≤–∞–π—Å—è ‚Äî —É—Å–ø–µ—Ö –±–ª–∏–∑–∫–æ!",
    "–ö–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.",
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å, –∞ –¥–∞–ª—å—à–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å.",
    "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –º–µ–Ω—å—à–µ!",
    "–ü—É—Å—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã –≤–µ–¥—É—Ç –∫ –º–∞–ª–µ–Ω—å–∫–∏–º —É—Å–ø–µ—Ö–∞–º.",
    "–î–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç ‚Äî –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç.",
    "–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞ ‚Äî –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è.",
    "–¢–≤–æ–∏ —É—Å–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–∞–¥—É—Ç!",
    "–î–≤–∏–≥–∞–π—Å—è –≤–ø–µ—Ä–µ–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ–ª—å—à–∏–º–∏ —à–∞–≥–∞–º–∏."
]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üçè –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
        types.KeyboardButton(text="ü•ï –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    )
    builder.row(
        types.KeyboardButton(text="üçá –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton(text="üçå –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è")
    )
    return builder.as_markup(resize_keyboard=True)

def complete_keyboard(task_id):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="ü•¶ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
        callback_data=f"complete_{task_id}")
    )
    return builder.as_markup()

def tasks_list_keyboard(tasks):
    builder = InlineKeyboardBuilder()
    for task in tasks:
        builder.add(types.InlineKeyboardButton(
            text=f"ü•¶ {task[2][:20]}..." if len(task[2]) > 20 else f"ü•¶ {task[2]}",
            callback_data=f"complete_{task[0]}"
        ))
    return builder.as_markup()

def priority_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üå∂Ô∏è –í–∞–∂–Ω–∞—è"),
        types.KeyboardButton(text="ü•í –û–±—ã—á–Ω–∞—è")
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def days_keyboard():
    builder = ReplyKeyboardBuilder()
    for d in [1, 2, 3, 5, 7, 14, 30]:
        builder.add(types.KeyboardButton(text=str(d)))
    builder.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def deadline_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞"),
        types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"),
        types.KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")
    )
    builder.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def checklist_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ù–µ—Ç –ø–æ–¥–∑–∞–¥–∞—á"),
        types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏")
    )
    builder.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

def attachments_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π"),
        types.KeyboardButton(text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª/—Ñ–æ—Ç–æ")
    )
    builder.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

# --- –Æ–º–æ—Ä, –ø–æ—Ö–≤–∞–ª–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
JOKES = [
    "–¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å –≤ —ç–∫—Ä–∞–Ω?",
    "–ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É, –∞ —Ç–æ –ø—Ä–µ–º–∏—é –∑–∞–±—É–¥—É —è.",
    "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî —Å–∫–∞–∂–∏, —è –Ω–∞–π–¥—É –¥—Ä—É–≥–æ–≥–æ!",
    "–ü–æ—Ä–∞–¥—É–π –º–µ–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –º–µ–º–∞–º–∏.",
    "–Ø —Ç—É—Ç, –µ—Å–ª–∏ —á—Ç–æ, –Ω–∞–±–ª—é–¥–∞—é üëÄ",
    "–†–∞–±–æ—Ç–∞ —Å–∞–º–∞ —Å–µ–±—è –Ω–µ —Å–¥–µ–ª–∞–µ—Ç, –∞ —è –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑!",
    "–°–¥–µ–ª–∞–µ—à—å –∑–∞–¥–∞—á—É ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –∞–Ω–µ–∫–¥–æ—Ç.",
    "–ï—Å–ª–∏ –±—ã –∑–∞–¥–∞—á–∏ –¥–µ–ª–∞–ª–∏—Å—å —Å–∞–º–∏... –Ω–æ –Ω–µ—Ç.",
    "–ü—Ä–æ–≤–µ—Ä—å, –Ω–µ –∑–∞–±—ã–ª –ª–∏ —Ç—ã –ø—Ä–æ –∑–∞–¥–∞—á—É. –Ø ‚Äî —Ç–æ—á–Ω–æ –Ω–µ—Ç.",
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª? –ü—Ä–æ–≤–µ—Ä—å!"
]

PRAISES = [
    "–ú–æ–ª–æ–¥–µ—Ü! –í–æ—Ç —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üòé",
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —è –¥–æ–≤–æ–ª–µ–Ω! –ú–æ–∂–µ—Ç, –¥–∞–∂–µ –ø—Ä–µ–º–∏—é –¥–∞–º... –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å.",
    "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ù–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è!",
    "–í–æ—Ç —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π, –∞ —Ç–æ —è –Ω–∞—á–Ω—É —à—É—Ç–∏—Ç—å —á–∞—â–µ.",
    "–¢—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ! –ù–∞—á–∞–ª—å–Ω–∏–∫ –¥–æ–≤–æ–ª–µ–Ω (—Ä–µ–¥–∫–æ –±—ã–≤–∞–µ—Ç).",
    "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –Ω–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø! –ê —Ç–æ —è –æ–ø—è—Ç—å –Ω–∞–ø–æ–º–Ω—é.",
    "–Ø –≤–ø–µ—á–∞—Ç–ª—ë–Ω —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–æ–π! –î–∞–∂–µ –∫–æ—Ñ–µ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª—Å—è.",
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –≤—ã—Å–æ—Ç–µ! –ù–µ –∑–∞–±—É–¥—å —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ.",
    "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –º–æ–∂–µ—à—å —Å–æ–±–æ–π –≥–æ—Ä–¥–∏—Ç—å—Å—è! –ù–æ –Ω–µ —Å–ª–∏—à–∫–æ–º.",
    "–í–æ—Ç —ç—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—å! –ú–æ–ª–æ–¥–µ—Ü! –ú–æ–∂–µ—Ç, —Ç—ã —Ä–æ–±–æ—Ç?"
]

REMINDER_PHRASES = [
    "–¢—ã –æ–ø—è—Ç—å –∑–∞–±—ã–ª –ø—Ä–æ –∑–∞–¥–∞—á—É? –ñ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_text}",
    "–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Ç—è–Ω—É—Ç—å? –í—ã–ø–æ–ª–Ω—è–π: {task_text}",
    "–Ø –Ω–µ –≤–∏–∂—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ: {task_text}",
    "–¢—ã –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—à—å? –ó–∞–¥–∞—á–∞: {task_text}",
    "–°—Ä–æ–∫–∏ –≥–æ—Ä—è—Ç! –°—Ä–æ—á–Ω–æ –∑–∞–π–º–∏—Å—å: {task_text}",
    "–ï—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å {task_text}, –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ.",
    "–Ø —É–∂–µ —É—Å—Ç–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ: {task_text}",
    "–¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –ø–æ: {task_text}?",
    "–°–¥–µ–ª–∞–π {task_text}, –∏–Ω–∞—á–µ –±—É–¥—É—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.",
    "–ü–æ—á–µ–º—É –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {task_text}?",
    "–Ø —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –Ω–∞ —Ç–µ–±—è –ø–æ –∑–∞–¥–∞—á–µ: {task_text}",
    "–ù–µ –ø–æ–¥–≤–µ–¥–∏ —Å: {task_text}",
    "–í—Ä–µ–º—è –∏–¥—ë—Ç, –∞ {task_text} –≤—Å—ë –Ω–µ –≥–æ—Ç–æ–≤–æ.",
    "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è? {task_text} –∂–¥–µ—Ç.",
    "–ü–æ—Ä–∞–¥—É–π –º–µ–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º: {task_text}",
    "–°–¥–µ–ª–∞–π —É–∂–µ –Ω–∞–∫–æ–Ω–µ—Ü: {task_text}",
    "–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å? {task_text}!",
    "–Ø —Å–ª–µ–∂—É –∑–∞ —Ç–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ: {task_text}",
    "–ù–µ –∑–∞–±—É–¥—å, —á—Ç–æ {task_text} ‚Äî —Ç–≤–æ—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
    "–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ: {task_text}",
    "–ñ–¥—É –æ—Ç—á—ë—Ç–∞ –ø–æ: {task_text}",
    "–¢—ã –Ω–µ –∑–∞–±—ã–ª –ø—Ä–æ: {task_text}? –Ø ‚Äî –Ω–µ—Ç.",
    "–í—ã–ø–æ–ª–Ω–∏ {task_text}, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º.",
    "–°–¥–µ–ª–∞–π {task_text} —Å–µ–≥–æ–¥–Ω—è.",
    "–Ø —Ö–æ—á—É –≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ: {task_text} –∫ –≤–µ—á–µ—Ä—É.",
    "–¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å: {task_text}",
    "–ù–µ —Ç—è–Ω–∏ —Å: {task_text}",
    "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {task_text}",
    "–°–¥–µ–ª–∞–π {task_text} ‚Äî –∏ –±—É–¥–µ—Ç —Ç–µ–±–µ —Å—á–∞—Å—Ç—å–µ.",
    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {task_text}!",
    "–ï—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–µ—à—å {task_text}, —è –Ω–∞—á–Ω—É —à—É—Ç–∏—Ç—å —á–∞—â–µ!",
    "–ü–æ—Ä–∞–¥—É–π –º–µ–Ω—è, –∞ —Ç–æ —è –Ω–∞—á–Ω—É —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ —Ä–∞–±–æ—Ç—É.",
    "–°–¥–µ–ª–∞–π {task_text}, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ —Å–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞.",
    "–¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ {task_text} –Ω–µ —Å–¥–µ–ª–∞–µ—Ç—Å—è —Å–∞–º–æ? –Ø ‚Äî –∑–Ω–∞—é.",
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –∑–∞–º–æ–ª—á–∞–ª ‚Äî –≤—ã–ø–æ–ª–Ω–∏ {task_text}!"
]

AI_HINTS = [
    "–†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∏ –Ω–∞—á–Ω–∏ —à–∞–≥–∞—Ç—å.",
    "–ü–æ—Å—Ç–∞–≤—å —Å–µ–±–µ –¥–µ–¥–ª–∞–π–Ω –∏ –∞—Ö–∞—Ö–∞.",
    "–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∫–∞–∂–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–¥—É–º–∞—Ç—å –µ—â–µ —Ä–∞–∑.",
    "–°–¥–µ–ª–∞–π —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–Ω–æ–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–Ω–æ–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "–ù–µ –∑–∞–±—ã–≤–∞–π –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Ç–µ–±—è.",
    "–°–æ—Å—Ç–∞–≤—å —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–º–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞.",
    "–ï—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∑–∞–¥–∞—á—É –∑–∞—Å—Ç—Ä—è–≤—à–∏.",
    "–ü–ª–∞–Ω–∏—Ä—É–π –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ.",
    "–°–¥–µ–ª–∞–π —Å–∞–º–æ–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å ‚Äî –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω–µ–µ.",
    "–ù–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –æ—à–∏–±–∞—Ç—å—Å—è!"
]

def get_ai_hint(task_text: str) -> str:
    text = task_text.lower()
    if "–æ—Ç—á–µ—Ç" in text or "–¥–æ–∫—É–º–µ–Ω—Ç" in text:
        return "–°–æ–±–µ—Ä–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –æ—Ç—á–µ—Ç –±—ã–ª –ø–æ–ª–Ω—ã–º."
    if "–∑–≤–æ–Ω–æ–∫" in text or "—Å–æ–∑–≤–æ–Ω" in text:
        return "–ü–æ–¥–≥–æ—Ç–æ–≤—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –∑–∞—Ä–∞–Ω–µ–µ."
    if "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü" in text:
        return "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–∞–π–¥—ã –∏ —á–µ—Ç–∫–∏–µ —Ç–µ–∑–∏—Å—ã."
    if "–ø–∏—Å—å–º–æ" in text or "email" in text:
        return "–ü—Ä–æ–≤–µ—Ä—å –ø–∏—Å—å–º–æ –Ω–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."
    if "–∫–æ–¥" in text or "—Å–∫—Ä–∏–ø—Ç" in text or "–ø—Ä–æ–≥—Ä–∞–º–º–∞" in text:
        return "–ü–∏—à–∏ –∫–æ–¥ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –∏ —Å—Ä–∞–∑—É —Ç–µ—Å—Ç–∏—Ä—É–π."
    return random.choice(AI_HINTS)

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(Command("start"))
async def start(message: types.Message):
    description = (
        "<b>–Ø ‚Äî —Ç–≤–æ–π –Ω–∞—á–∞–ª—å–Ω–∏–∫-–±–æ—Ç!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –∑–∞–¥–∞—á–∞—Ö –∏ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è (–æ—Ç 5 –¥–æ 10 —Ä–∞–∑, —Å 7:00 –¥–æ 21:00 –ú–°–ö).\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ <b>üçè –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b> ‚Äî –¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É, –∏ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–µ–π.\n"
        "‚Ä¢ <b>ü•ï –ú–æ–∏ –∑–∞–¥–∞—á–∏</b> ‚Äî –ø–æ–∫–∞–∂—É —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n"
        "‚Ä¢ <b>üçâ –ú–æ–∏ —É—Å–ø–µ—Ö–∏</b> ‚Äî –≤—ã–≥—Ä—É–∂—É —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ —Ç—ã –æ—Ç–º–µ—á–∞–µ—à—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é, —è –ø—Ä–µ–¥–ª–æ–∂—É —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç.\n"
        "‚Ä¢ –Ø —à—É—á—É, –º–æ—Ç–∏–≤–∏—Ä—É—é –∏ –∏–Ω–æ–≥–¥–∞ –ø–æ–¥—à—É—á–∏–≤–∞—é –Ω–∞–¥ —Ç–æ–±–æ–π!\n"
        "‚Ä¢ –ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–º–µ—á–∞–µ—à—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π ‚Äî —è –Ω–∞—á–Ω—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –æ—Å–æ–±–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ!\n"
        "\n<b>–ü–æ–≥–Ω–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá</b>"
    )
    await message.answer(description, parse_mode=ParseMode.HTML, reply_markup=main_keyboard())

# --- –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –¥–µ–¥–ª–∞–π–Ω–æ–º, —á–µ–∫-–ª–∏—Å—Ç–æ–º, –≤–ª–æ–∂–µ–Ω–∏–µ–º ---
@dp.message(F.text.in_(["üçè –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"]))
async def new_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ç–µ–º –ª—É—á—à–µ!\n\n(–∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞)", reply_markup=None)
    await state.set_state(TaskStates.waiting_for_task)

@dp.message(TaskStates.waiting_for_task)
async def process_task(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
        await state.clear()
        return
    await state.update_data(task_text=message.text)
    await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? (1-30)", reply_markup=None)
    await state.set_state(TaskStates.waiting_for_days)

@dp.message(TaskStates.waiting_for_days)
async def process_days(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
        await state.clear()
        return
    try:
        days = int(message.text)
        if days < 1 or days > 30:
            raise ValueError
        await state.update_data(days=days)
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=priority_keyboard())
        await state.set_state(TaskStates.waiting_for_priority)
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30.")

@dp.message(TaskStates.waiting_for_priority)
async def process_priority(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
        await state.clear()
        return
    text = message.text.lower()
    if "–≤–∞–∂–Ω" in text:
        priority = "–≤–∞–∂–Ω–∞—è"
    else:
        priority = "–æ–±—ã—á–Ω–∞—è"
    await state.update_data(priority=priority)
    await finish_task_creation(message, state)

async def finish_task_creation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute('''INSERT INTO tasks 
                   (user_id, task_text, days, created_at, priority) 
                   VALUES (?, ?, ?, ?, ?)''',
                   (message.from_user.id, data['task_text'], data['days'], datetime.now(),
                    data.get('priority', '–æ–±—ã—á–Ω–∞—è')))
    conn.commit()
    task_id = cursor.lastrowid
    ai_hint = get_ai_hint(data['task_text'])
    days_text = plural_days(data['days'])
    await message.answer(
        f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –Ω–µ–π {days_text}.\n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data.get('priority', '–æ–±—ã—á–Ω–∞—è')}\n"
        f"ü§ñ –°–æ–≤–µ—Ç –æ—Ç –ò–ò: <i>{ai_hint}</i>",
        reply_markup=main_keyboard()
    )
    await state.clear()
    now = datetime.now()
    tz_msk = pytz.timezone("Europe/Moscow")
    # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç
    remind_time = now + timedelta(minutes=20)
    remind_time = tz_msk.localize(remind_time)
    remind_time_utc = remind_time.astimezone(pytz.utc)
    scheduler.add_job(
        send_reminder,
        'date',
        run_date=remind_time_utc,
        args=(message.from_user.id, task_id),
        id=f"remind_{task_id}_first",
        replace_existing=True
    )
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å 7:00 –¥–æ 21:00 –ú–°–ö
    for day in range(data['days']):
        if data.get('priority', '–æ–±—ã—á–Ω–∞—è') == "–≤–∞–∂–Ω–∞—è":
            reminders_per_day = random.randint(8, 10)
        else:
            reminders_per_day = random.randint(7, 8)
        start_hour = 7
        end_hour = 21
        interval = (end_hour - start_hour) * 60 // reminders_per_day
        times = []
        for i in range(reminders_per_day):
            base_minute = start_hour * 60 + i * interval
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 15 –º–∏–Ω—É—Ç
            minute = base_minute + random.randint(-10, 10)
            hour = minute // 60
            min_in_hour = minute % 60
            # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã 7:00-21:00
            hour = max(start_hour, min(hour, end_hour - 1))
            min_in_hour = max(0, min(min_in_hour, 59))
            # –í –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ + 20 –º–∏–Ω—É—Ç
            if day == 0:
                dt_check = now.replace(hour=hour, minute=min_in_hour, second=0, microsecond=0)
                if dt_check < now + timedelta(minutes=20):
                    continue
            times.append((hour, min_in_hour))
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        times = sorted(set(times))
        for i, (remind_hour, remind_minute) in enumerate(times):
            remind_time = (now + timedelta(days=day)).replace(hour=remind_hour, minute=remind_minute, second=0, microsecond=0)
            remind_time = tz_msk.localize(remind_time)
            remind_time_utc = remind_time.astimezone(pytz.utc)
            if remind_time_utc < datetime.now(pytz.utc):
                remind_time_utc += timedelta(days=1)
            scheduler.add_job(
                send_reminder,
                'date',
                run_date=remind_time_utc,
                args=(message.from_user.id, task_id),
                id=f"remind_{task_id}_{day}_{i}_rnd",
                replace_existing=False
            )

async def send_first_reminder(user_id: int, task_text: str):
    await bot.send_message(
        user_id,
        f"üß† –ü–æ–º–Ω—é –ø—Ä–æ –∑–∞–¥–∞—á–∫—É: <b>{task_text}</b>\n–î–∞–≤–∞–π –µ–µ –ø–æ–¥–µ–ª–∞–µ–º! –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π!",
        parse_mode=ParseMode.HTML
    )

def is_weekend(dt=None):
    if dt is None:
        dt = datetime.now()
    return dt.weekday() >= 5

def plural_days(n):
    n = abs(n)
    if n % 10 == 1 and n % 100 != 11:
        return f"{n} –¥–µ–Ω—å"
    elif 2 <= n % 10 <= 4 and not (12 <= n % 100 <= 14):
        return f"{n} –¥–Ω—è"
    else:
        return f"{n} –¥–Ω–µ–π"

# --- –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è ---
@dp.message(F.text.in_(["üçå –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è"]))
async def motivation_btn(message: types.Message):
    quote = random.choice(MOTIVATION_QUOTES)
    await message.answer(f"üçå –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è: {quote}")

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å–ø–µ—Ö–∏ ---
def stats_success_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ø–µ—Ö–∏",
        callback_data="show_success"
    ))
    return builder.as_markup()

@dp.message(F.text.in_(["üçá –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def stats_btn(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE user_id = ?', (user_id,))
    total = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = "completed"', (user_id,))
    done = cursor.fetchone()[0]
    cursor.execute('SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = "active"', (user_id,))
    active = cursor.fetchone()[0]
    await message.answer(
        f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\n"
        f"üïí –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {round(done / total * 100, 1) if total else 0}%",
        reply_markup=stats_success_keyboard()
    )

@dp.callback_query(F.data == "show_success")
async def show_success_history(callback: types.CallbackQuery):
    month_ago = datetime.now() - timedelta(days=30)
    cursor.execute(
        '''SELECT task_text, created_at, status, report FROM tasks
           WHERE user_id = ? AND created_at >= ?''',
        (callback.from_user.id, month_ago)
    )
    tasks = cursor.fetchall()
    if not tasks:
        await callback.message.answer("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á. –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é!")
        await callback.answer()
        return
    text = "<b>–¢–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –∑–∞ –º–µ—Å—è—Ü:</b>\n\n"
    for idx, (task_text, created_at, status, report) in enumerate(tasks, 1):
        status_str = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if status == "completed" else "üïí –ê–∫—Ç–∏–≤–Ω–∞"
        report_str = f"\n<i>–û—Ç—á–µ—Ç:</i> {report}" if report else ""
        text += f"{idx}. {task_text}\n{status_str} | {created_at[:16]}{report_str}\n\n"
    await callback.message.answer(text, parse_mode=ParseMode.HTML)
    await callback.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
@dp.message(F.text.in_(["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"]))
async def delete_task_btn(message: types.Message, state: FSMContext):
    cursor.execute('SELECT id, task_text FROM tasks WHERE user_id = ? AND status = "active"', (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardBuilder()
    for task in tasks:
        kb.add(types.InlineKeyboardButton(
            text=task[1][:30], callback_data=f"delete_{task[0]}"
        ))
    await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())
    await state.clear()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    await callback.message.edit_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
@dp.message(F.text.in_(["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"]))
async def edit_task_btn(message: types.Message, state: FSMContext):
    cursor.execute('SELECT id, task_text FROM tasks WHERE user_id = ? AND status = "active"', (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    kb = InlineKeyboardBuilder()
    for task in tasks:
        kb.add(types.InlineKeyboardButton(
            text=task[1][:30], callback_data=f"edit_{task[0]}"
        ))
    await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await state.clear()

@dp.callback_query(F.data.startswith("edit_"))
async def edit_task(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    cursor.execute('SELECT task_text FROM tasks WHERE id = ?', (task_id,))
    row = cursor.fetchone()
    if not row:
        await callback.message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await state.update_data(edit_task_id=task_id)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskStates.editing_task_text)
    await callback.answer()

@dp.message(TaskStates.editing_task_text)
async def save_edit_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    cursor.execute('UPDATE tasks SET task_text = ? WHERE id = ?', (message.text, task_id))
    conn.commit()
    await message.answer("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_keyboard())
    await state.clear()

# --- –ß–µ–∫-–ª–∏—Å—Ç (–ø–æ–¥–∑–∞–¥–∞—á–∏) ---
@dp.message(F.text.in_(["üìã –ß–µ–∫-–ª–∏—Å—Ç"]))
async def checklist_btn(message: types.Message, state: FSMContext):
    cursor.execute('SELECT id, task_text FROM tasks WHERE user_id = ? AND status = "active"', (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞.")
        return
    kb = InlineKeyboardBuilder()
    for task in tasks:
        kb.add(types.InlineKeyboardButton(
            text=task[1][:30], callback_data=f"showcheck_{task[0]}"
        ))
    await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞:", reply_markup=kb.as_markup())
    await state.clear()

@dp.callback_query(F.data.startswith("showcheck_"))
async def show_checklist(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    cursor.execute('SELECT checklist FROM tasks WHERE id = ?', (task_id,))
    row = cursor.fetchone()
    if row and row[0]:
        checklist = row[0]
        await callback.message.answer(f"–ß–µ–∫-–ª–∏—Å—Ç:\n{checklist}\n\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.update_data(checklist_task_id=task_id)
        await state.set_state(TaskStates.adding_checklist)
    else:
        await callback.message.answer("–ß–µ–∫-–ª–∏—Å—Ç –ø—É—Å—Ç. –ù–∞–ø–∏—à–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.update_data(checklist_task_id=task_id)
        await state.set_state(TaskStates.adding_checklist)
    await callback.answer()

@dp.message(TaskStates.adding_checklist)
async def save_checklist(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("checklist_task_id")
    cursor.execute('UPDATE tasks SET checklist = ? WHERE id = ?', (message.text, task_id))
    conn.commit()
    await message.answer("–ß–µ–∫-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_keyboard())
    await state.clear()

# --- –†–µ–∂–∏–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ ---
@dp.message(F.text.in_(["üõå –†–µ–∂–∏–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ"]))
async def weekend_btn(message: types.Message):
    if is_weekend():
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ. –û—Ç–¥—ã—Ö–∞–π, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –∑–∞–¥–∞—á–∏ üòâ")
    else:
        await message.answer("–°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø–æ –æ–±—ã—á–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")

# --- –ú–æ–∏ –∑–∞–¥–∞—á–∏ ---
@dp.message(F.text.in_(["ü•ï –ú–æ–∏ –∑–∞–¥–∞—á–∏", "–ú–æ–∏ –∑–∞–¥–∞—á–∏"]))
async def my_tasks(message: types.Message):
    cursor.execute('SELECT * FROM tasks WHERE user_id = ? AND status = "active"', (message.from_user.id,))
    tasks = cursor.fetchall()
    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üçè –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'.")
        return
    text = "–í–æ—Ç —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
    for idx, task in enumerate(tasks, 1):
        text += f"{idx}. {task[2]} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[7]})\n"
    await message.answer(text, reply_markup=tasks_list_keyboard(tasks))

# --- –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É ---
@dp.callback_query(F.data.startswith("complete_"))
async def complete_task(callback: types.CallbackQuery, state: FSMContext):
    task_id = callback.data.split("_")[1]
    cursor.execute('UPDATE tasks SET status = "completed" WHERE id = ?', (task_id,))
    conn.commit()
    praise = random.choice(PRAISES)
    await callback.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n\n{praise}")
    await callback.message.answer(
        "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ? –ù–∞–ø–∏—à–∏ –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        reply_markup=main_keyboard()
    )
    await state.update_data(report_task_id=int(task_id))
    await state.set_state(TaskStates.waiting_for_report)

@dp.message(TaskStates.waiting_for_report)
async def save_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("report_task_id")
    if not task_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    cursor.execute('UPDATE tasks SET report = ? WHERE id = ?', (message.text, task_id))
    conn.commit()
    await message.answer("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ", reply_markup=main_keyboard())
    await state.clear()

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —é–º–æ—Ä–æ–º –∏ —Å—Ç—Ä–æ–≥–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ---
async def send_reminder(user_id: int, task_id: int):
    cursor.execute('SELECT task_text, created_at, status FROM tasks WHERE id = ?', (task_id,))
    row = cursor.fetchone()
    if not row:
        return
    task_text, created_at, status = row
    created_dt = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S.%f") if '.' in created_at else datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
    days_passed = (datetime.now() - created_dt).days
    if status == "active" and days_passed >= 3:
        phrase = f"‚ö†Ô∏è –¢—ã —É–∂–µ {days_passed} –¥–Ω—è(–µ–π) –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å –∑–∞–¥–∞—á—É: <b>{task_text}</b>!\n" \
                 "–ù–∞—á–∞–ª—å–Ω–∏–∫ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω. –ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É!"
    else:
        idx = datetime.now().day % len(REMINDER_PHRASES)
        phrase = REMINDER_PHRASES[idx].format(task_text=task_text)
        if random.random() < 0.4:
            phrase += "\n\n" + random.choice(JOKES)
    await bot.send_message(
        user_id,
        phrase,
        parse_mode=ParseMode.HTML,
        reply_markup=complete_keyboard(task_id)
    )

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    if not scheduler.running:
        scheduler.start(paused=False)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    finally:
        conn.close()

# --- –í–∞–∂–Ω–æ ---
# –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:
# 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –û–°–¢–ê–ù–û–í–ò–õ–ò —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å (Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –≥–¥–µ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω).
# 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ç–æ–º –∂–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
#    python /workspaces/nach_bot/nachbot.py
# 3. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ VSCode, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ —Å –±–æ—Ç–æ–º.
# 4. –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Å–µ—Ä–≤–∏—Å (supervisor, docker –∏ —Ç.–¥.), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞.
# 5. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ –≤ —Ç–æ–π —Å—Ä–µ–¥–µ.
# 6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –≤ .env –∞–∫—Ç—É–∞–ª—å–Ω–∞ –∏ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram.
# 7. –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞–¥–ø–∏—Å—å INFO:__main__:... (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ—Ç aiogram).

# --- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç ---

# 1. –°—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö python-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —ç—Ç–∏–º –±–æ—Ç–æ–º (ps aux | grep python).
# 2. –í—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –Ω–µ —Ç–æ—Ç —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ –≤ —Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
# 3. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –≤ .env –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram.
# 4. –ü–æ—Ä—Ç/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç/–±—Ä–∞–Ω–¥–º–∞—É—ç—Ä –º–µ—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é —Å Telegram.
# 5. –í –∫–æ–¥–µ –µ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–æ –æ–Ω–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–µ—Ä–≤–∏—Å).
# 6. –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤/–æ–∫–æ–Ω VSCode –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é.
# 7. –í—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ Telegram –∫—ç—à–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é.
# 8. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Docker/Supervisor ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä/—Å–µ—Ä–≤–∏—Å.
# 9. –ï—Å–ª–∏ –±–æ—Ç –ø–∞–¥–∞–µ—Ç —Å—Ä–∞–∑—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, —Ç–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—á–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ —Ç.–¥.).
# 10. –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /test.

# --- –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–µ–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω ---
# - –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–¥–ø–∏—Å—å INFO:__main__ –∏–ª–∏ INFO:aiogram...
# - –ü–æ—Å–ª–µ /start –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏.
# - –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Ç–æ–∫–µ–Ω.

# --- –ò–¥–µ–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---

# 1. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–≤–∞–∂–Ω–∞—è/–æ–±—ã—á–Ω–∞—è/–Ω–∏–∑–∫–∞—è)
# 2. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª—è—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
# 3. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç –æ—Ç –ò–ò
# 4. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É) –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ X –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
# 5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Calendar (—ç–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á)
# 6. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∏—Ç—å—Å—è –∑–∞–¥–∞—á–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
# 7. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é
# 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# 9. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (TTS)
# 10. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ (—á–µ–∫-–ª–∏—Å—Ç –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏)
# 11. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã/—Ñ–æ—Ç–æ –∫ –æ—Ç—á–µ—Ç—É –ø–æ –∑–∞–¥–∞—á–µ
# 12. "–†–µ–∂–∏–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ": –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ (–∏–ª–∏ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑)
# 13. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00-19:00)
# 14. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
# 15. "–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º": –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ–ª–≥–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–æ–±–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ/–∂–µ—Å—Ç–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

# –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:
# 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –ø—Ä–æ–ø–∏—Å–∞–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π TOKEN –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.
# 2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /workspaces/nach_04.
# 3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
#    python nachbot.py
# 4. –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞ INFO:__main__... ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.
# 5. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram –∫–æ–º–∞–Ω–¥—É /start.

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ venv, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:
#    source venv/bin/activate

# –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
